---
# tasks file for k8s_master

- name: Install net-tools for network management
  apt:
    name: net-tools
    state: present

- name: Update apt-get repo and cache
  apt: update_cache=yes force_apt_get=yes

- name: "Installing Tinc"
  apt: name={{item}} state=present
  with_items:
    - tinc

- name: "Create a directory for tinc configurations"
  shell: mkdir -p /etc/tinc/netname/hosts

- name: "copy tinc.conf file"
  template:
    src: tinc.conf
    dest: "/etc/tinc/netname/"

- name: "Copy hosts config file"
  template:
    src: master
    dest: "/etc/tinc/netname/hosts/"

- name: "copy tinc-up script"
  template:
    src: tinc-up
    dest: "/etc/tinc/netname/"

- name: "copy tinc-down script"
  template:
    src: tinc-down
    dest: "/etc/tinc/netname/"

- name: "Make the tinc scripts executable"
  shell: chmod 755 /etc/tinc/netname/tinc-*

# Adding kubernetes repo from base url using gpg keys
- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present
 
- name: add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
 
- name: add Kubernetes' APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: 'kubernetes'

# Installing 'docker', 'kubeadm' and 'iproute-tc' on master node 
- name: Installing Docker & kubeadm on Master Node
  package:
    name:
      - kubeadm
      - iproute2
    state: present

# Starting and enabling the docker on master node.
- name: enabling Docker on Master Node
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: ensure docker registry is available
  apt_repository: repo='deb https://download.docker.com/linux/ubuntu bionic stable' state=present

- name: ensure docker and dependencies are installed
  apt: name=docker-ce update_cache=yes

# Starting kubelet on master node. we maybe have a question on why kubelet is run on master node?
# The reason for running kubelet on master node is that, kubeadm uses containers (pods) to deploy etcd and the api server components. 
# For this, static manifests are created as yaml-files which are picked up by the kubelet on the master node 
# to provide the infrastructure pods. An added benefit is that you have the master node metrics available from the kubernetes api.
- name: Staring kubelet on Master Node
  service:
    name: kubelet
    state: started
    enabled: yes

# Updating Docker cgroup on Master Node. Reason for using cgroupdriver as 'systemd' instead of default ones, 
# https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/
- name: Updating Docker cgroup on Master Node
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }
# Restart the docker on Master node to get all things activated
- name: Restart docker on Master Node
  service:
    name: docker
    state: restarted

- name: swapp off
  shell: swapoff -a

# Updating IP tables on Master Node. Usually in the linux distros like ubuntu,
# (https://www.kevinhooke.com/2018/11/23/checking-iptables-filtering-for-bridge-networking-on-ubuntu-for-kubernetes-setup/)
# the bridge module in the kernel for "ip6tables, iptables and arptables" has the default set to "1"
# ("on", i.e. "*do* send the packets to iptables"), but for the distros like Fedora, RHEL, and CentOS they are set to '0' so we need to
# update the '/etc/sysctl.d/k8s.conf' to set it to '1'
- name: Updating IP tables on master Node
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

# Reloading sysctl on Slave Node to activate the bridge changes
- name: Reloading sysctl on master Node
  command: sysctl --system

- name: Workaround for running kube-api server on ubuntu_21.x and later versions
  shell:
    cmd: |
      containerd config default | tee /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
      service containerd restart
      service kubelet restart

# A token creation command for slave nodes. This command is used to get the token for the slave node to join the cluster.
# Using “register” the output of the “command” module is stored in a variable called “token”.
# Now this token variable contain the command that we need to run on slave node, so that it joins the master node.
# - name: Creating token for Slave
#   command: kubeadm token create  --print-join-command
#   register: token

# copy application to the server
- name: "copy deployments file to master"
  template:
    src: deployments.yml
    dest: "/root/"

# copy services to the server
- name: "copy services file to master"
  template:
    src: services.yml
    dest: "/root/"

# copy steps to follow to the server
- name: "copy services file to master"
  template:
    src: steps.txt
    dest: "/root/"

# Cleaning caches on nodes RAM's. The “shell” module used here to clean the buffer cache on the master node,
# because while doing the setup it will create lots of temporary data on RAM
- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches