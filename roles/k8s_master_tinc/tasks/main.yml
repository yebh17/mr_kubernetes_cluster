---
# tasks file for k8s_master

- name: Install net-tools for network management
  apt:
    name: net-tools
    state: present

- name: Update apt-get repo and cache
  apt: update_cache=yes force_apt_get=yes

- name: "Installing Tinc"
  apt: name={{item}} state=present
  with_items:
    - tinc

- name: "Create a directory for tinc configurations"
  shell: mkdir -p /etc/tinc/netname/hosts

- name: "copy tinc.conf file"
  template:
    src: tinc.conf
    dest: "/etc/tinc/netname/"

- name: "Copy hosts config file"
  template:
    src: master
    dest: "/etc/tinc/netname/hosts/"

- name: "create key pairs"
  ansible.builtin.expect:
    command: tincd -n netname -K4096
    responses:
      'Please enter a file to save private RSA key to [/etc/tinc/netname/rsa_key.priv]: ': ''
      'Please enter a file to save public RSA key to [/etc/tinc/netname/hosts/externalnyc]: ': ''

- name: "copy tinc-up script"
  template:
    src: tinc-up
    dest: "/etc/tinc/netname/"

- name: "copy tinc-down script"
  template:
    src: tinc-down
    dest: "/etc/tinc/netname/"

- name: "Make the tinc scripts executable"
  shell: chmod 755 /etc/tinc/netname/tinc-*

# Adding kubernetes repo from base url using gpg keys
- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present
 
- name: add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
 
- name: add Kubernetes' APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: 'kubernetes'

# Installing 'docker', 'kubeadm' and 'iproute-tc' on master node 
- name: Installing Docker & kubeadm on Master Node
  package:
    name:
      - kubeadm
      - iproute2
    state: present

# Starting and enabling the docker on master node.
- name: enabling Docker on Master Node
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: ensure docker registry is available
  apt_repository: repo='deb https://download.docker.com/linux/ubuntu bionic stable' state=present

- name: ensure docker and dependencies are installed
  apt: name=docker-ce update_cache=yes

# Starting kubelet on master node. we maybe have a question on why kubelet is run on master node?
# The reason for running kubelet on master node is that, kubeadm uses containers (pods) to deploy etcd and the api server components. 
# For this, static manifests are created as yaml-files which are picked up by the kubelet on the master node 
# to provide the infrastructure pods. An added benefit is that you have the master node metrics available from the kubernetes api.
- name: Staring kubelet on Master Node
  service:
    name: kubelet
    state: started
    enabled: yes

# Pulling all the images required for k8s master on master node.
- name: Pulling the images of k8s master
  command: kubeadm config images pull

# Updating Docker cgroup on Master Node. Reason for using cgroupdriver as 'systemd' instead of default ones, 
# https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/
- name: Updating Docker cgroup on Master Node
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }
# Restart the docker on Master node to get all things activated
- name: Restart docker on Master Node
  service:
    name: docker
    state: restarted

# Initialize kubernetes cluster with a pod network so that the Pods can talk to each other, also ignoring errors like 'NumCPU', 'Mem'
# and 'FileContent--proc-sys-net-bridge-bridge-nf-call-iptables' as they are limited to system resources.
- name: Initializing k8s cluster
  command: kubeadm init --pod-network-cidr=10.244.0.0/16 --ignore-preflight-errors=NumCPU --ignore-preflight-errors=Mem --ignore-preflight-errors=FileContent--proc-sys-net-bridge-bridge-nf-call-iptables

# Setting kubectl on master node with updating kubernetes configuration from default path to '$HOME/.kube/config' path and updating
# ownership permissions to user and group 
- name: Setting up kubectl on Master Node
  shell:
    cmd: |
      mkdir -p $HOME/.kube
      sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
      sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Deploying a CNI plugin on master node, we use 'calico' for it, https://projectcalico.docs.tigera.io/about/about-calico
- name: Deploying Calico on Master Node
  command: kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

# A token creation command for slave nodes. This command is used to get the token for the slave node to join the cluster.
# Using “register” the output of the “command” module is stored in a variable called “token”.
# Now this token variable contain the command that we need to run on slave node, so that it joins the master node.
# - name: Creating token for Slave
#   command: kubeadm token create  --print-join-command
#   register: token

# Cleaning caches on nodes RAM's. The “shell” module used here to clean the buffer cache on the master node,
# because while doing the setup it will create lots of temporary data on RAM
- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches