---
# tasks file for k8s_vpn

# Installing ovpn

- name: add universe repo
  become: yes
  become_user: root
  expect:
    command: "apt-add-repository universe"
    responses:
      'Press \[ENTER\] to continue or Ctrl\-c to cancel\.': ''

- name: apt update
  become: yes
  become_user: root
  command: "apt update"

- name: install python2.7
  become: yes
  become_user: root
  expect:
    command: "apt install python2-minimal"
    responses:
        'Do you want to continue\? \[Y\/n\]': 'y'

- name: "Installing OpenVPN"
  apt: name={{item}} state=present
  with_items:
    - openvpn

- name: Install any necessary dependencies
  apt:
    name: "git"
    state: present
  become: true

- name: "Download easy-rsa from GitHub"
  git:
    repo: "https://github.com/OpenVPN/easy-rsa.git"
    dest: "{{ easyrsa_dest }}"
    version: "{{ easyrsa_version }}"

- name: "Configure easy-rsa"
  template:
    src: vars.j2
    dest: "{{ easyrsa_dest }}/easyrsa3/vars"

- name: "Initialize pki"
  command: ./easyrsa init-pki
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/pki"

- name: "Build CA keys"
  command: ./easyrsa build-ca nopass
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/pki/private/ca.key"

- name: "Build the DH (Diffie-Hellman) key"
  command: ./easyrsa gen-dh
  args:
    chdir: "{{easyrsa_dest}}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/pki/dh.pem"

- name: "Generate the server certificate/key"
  command: ./easyrsa --req-cn=server gen-req server nopass
  args:
    chdir: "{{ easyrsa_dest }}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/pki/private/server.key"

- name: "Get the new CA to sign our server key"
  command: ./easyrsa sign-req server server
  args:
    chdir: "{{ easyrsa_dest }}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/issued/server.crt"

- name: "Create the client keys"
  command: ./easyrsa --req-cn={{item.name}} gen-req {{item.name}} nopass
  args:
    chdir: "{{ easyrsa_dest }}/easyrsa3"
    creates: "{{ easyrsa_dest }}/easyrsa3/pki/private/{{item.name}}.key"
  with_items: "{{ easyrsa_clients }}"

- name: "Get the certificate authority to sign the client request"
  command: ./easyrsa sign-req client {{item.name}}
  args:
    chdir: "{{ easyrsa_dest }}/easyrsa3"
    creates: "{{easyrsa_dest}}/easyrsa3/issued/{{item.name}}.crt"
  with_items: "{{ easyrsa_clients }}"

- name: "make directory openvpn_certs"
  command: mkdir ~/openvpn_certs

- name: "Copy dh pem"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/dh.pem"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "copy ca key"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/private/ca.key"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Copy server key"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/private/server.key"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Copy server crt"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/issued/server.crt"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Copy client key"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/private/client1.key"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Copy client crt"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/issued/client1.crt"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Copy ca crt"
  copy:
    src: "{{ easyrsa_dest }}/easyrsa3/pki/ca.crt"
    dest: ~/openvpn_certs
    remote_src: yes

- name: "Build HMAC"
  shell: openvpn --genkey secret ~/openvpn_certs/ta.key

- name: "Copy all certs and keys to openvpn folder"
  copy:
    src: ~/openvpn_certs/{{ item }}
    dest: /etc/openvpn
    remote_src: yes
  loop: "{{ easyrsa_certs }}"

- name: "copy sample server config to ovpn folder"
  copy:
    src: /usr/share/doc/openvpn/examples/sample-config-files/server.conf
    dest: /etc/openvpn/
    remote_src: yes

- name: "Setting TLS AUTH in config"
  lineinfile: 
    path: /etc/openvpn/server.conf
    regexp: 'tls-auth ta.key 0' 
    line: "tls-auth ta.key 0\nkey-direction 0"
  tags:
    - setconfig

- name: "Setting cipher in config"
  lineinfile: 
    path: /etc/openvpn/server.conf
    regexp: 'cipher AES-128-CBC' 
    line: "cipher AES-128-CBC\nauth SHA256"
  tags:
    - setconfig

- name: Replace file name dh2048.pem to dh.pem in the config file
  ansible.builtin.replace:
    path: /etc/openvpn/server.conf
    regexp: 'dh dh2048.pem'
    replace: 'dh dh.pem'

- name: "Setting nobody user in config"
  lineinfile: 
    path: /etc/openvpn/server.conf
    regexp: 'user nobody' 
    line: "user nobody"
  tags:
    - setconfig

- name: "Setting nogroup group in config"
  lineinfile: 
    path: /etc/openvpn/server.conf
    regexp: 'group nogroup' 
    line: "group nogroup"
  tags:
    - setconfig

- name: "Setting redirect all traffic over VPN"
  lineinfile: 
    path: /etc/openvpn/server.conf
    regexp: 'redirect-gateway def1 bypass-dhcp' 
    line: 'push "redirect-gateway def1 bypass-dhcp"'
  tags:
    - setconfig

- name: "Setting IP forwarding"
  lineinfile: 
    path: /etc/sysctl.conf
    regexp: 'net.ipv4.ip_forward' 
    line: "net.ipv4.ip_forward=1"
  tags:
    - setipforward

- name: "Sysctl reload"
  shell: sysctl -p
  tags:
    - setipforward

- name: "IP forward settings"
  lineinfile: 
    path: /etc/default/ufw
    regexp: 'DEFAULT_FORWARD_POLICY' 
    line: 'DEFAULT_FORWARD_POLICY="ACCEPT"'
  tags:
    - firewallconfig

- name: "Allow VPN traffic on port 1194 UDP"
  shell: ufw allow 1194/udp
  tags:
    - firewallconfig

- name: "Allow VPN traffic on SSH"
  shell: ufw allow OpenSSH
  tags:
    - firewallconfig

- name: Masquerade traffic from VPN
  blockinfile:
    path: /etc/ufw/before.rules
    block: |  
      # START OPENVPN RULES
      # NAT table rules
      *nat
      :POSTROUTING ACCEPT [0:0] 
      # Allow traffic from OpenVPN client  (change to the interface you discovered!)
      -A POSTROUTING -o ens5 -j MASQUERADE
      COMMIT
      # END OPENVPN RULES
  tags:
    - masq

- name: "Reload firewall"
  shell: ufw disable && ufw --force enable
  tags:
    - firewallconfig

- name: "Start OpenVPN"
  shell: systemctl start openvpn@server && systemctl enable openvpn@server 
  tags:
    - startvpn

- name: "Create client config directory"
  file:
    path: ~/client-configs/files
    state: directory
  tags:
    - clientconfig

- name: "Copy base client config"
  copy:
    src: /usr/share/doc/openvpn/examples/sample-config-files/client.conf
    dest: ~/client-configs/base.conf
    remote_src: yes
  tags:
    - clientconfig

- name: "Fetch public IP address"
  shell: curl http://ipinfo.io/ip
  register: host_ip

- name: Replace file name dh2048.pem to dh.pem in the config file
  ansible.builtin.replace:
    path: ~/client-configs/base.conf
    regexp: 'remote my-server-1 1194'
    replace: 'remote {{ host_ip.stdout }} 1194'

- debug:
    msg: "{{ host_ip }}" 
  tags:
    - printip

- name: "Setting nobody user in config"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'user nobody' 
    line: "user nobody"
  tags:
    - clientconfig

- name: "Setting nogroup group in config"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'group nogroup' 
    line: "group nogroup"
  tags:
    - clientconfig

- name: "Comment certs"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'ca ca.crt' 
    line: "#ca ca.crt"
  tags:
    - clientconfig

- name: "Comment TLS file lookup"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'tls-auth ta.key' 
    line: "tls-auth ta.key 0"
  tags:
    - clientconfig

- name: "Comment certs"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'cert client.crt' 
    line: "#cert client.crt"
  tags:
    - clientconfig

- name: "Comment certs"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'key client.key' 
    line: "#key client.key"
  tags:
    - clientconfig

- name: "Setting cipher in config"
  lineinfile: 
    path: ~/client-configs/base.conf
    regexp: 'cipher AES-128-CBC' 
    line: "cipher AES-128-CBC\nauth SHA256\nkey-direction 1"
  tags:
    - clientconfig

- name: "Create OpenVPN client file"
  shell: |
    cat ~/client-configs/base.conf > ~/client-configs/files/client.ovpn 
    echo '<ca>' >>  ~/client-configs/files/client.ovpn 
    cat ~/openvpn_certs/ca.crt >>  ~/client-configs/files/client.ovpn 
    echo '</ca>\n<cert>' >>  ~/client-configs/files/client.ovpn 
    cat ~/openvpn_certs/client1.crt >>  ~/client-configs/files/client.ovpn 
    echo '</cert>\n<key>' >>  ~/client-configs/files/client.ovpn 
    cat ~/openvpn_certs/client1.key >>  ~/client-configs/files/client.ovpn 
    echo '</key>\n<tls-auth>' >>  ~/client-configs/files/client.ovpn 
    cat ~/openvpn_certs/ta.key >>  ~/client-configs/files/client.ovpn 
    echo '</tls-auth>' >>  ~/client-configs/files/client.ovpn 
  tags:
    - clientfile

- name: "Get client OpenVPN file to master"
  fetch:
    src: /root/client-configs/files/client.ovpn
    dest: ./roles/k8s_master_ovpn/templates/
    flat: yes
  tags:
    - getvpnfile_master

- name: "Get client OpenVPN file to slaves"
  fetch:
    src: /root/client-configs/files/client.ovpn
    dest: ./roles/k8s_slave_ovpn/templates/
    flat: yes
  tags:
    - getvpnfile_slaves

