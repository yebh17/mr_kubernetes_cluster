---
# tasks file for k8s_master

- name: Install net-tools for network management
  apt:
    name: net-tools
    state: present

# Adding kubernetes repo from base url using gpg keys
- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present
 
- name: add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
 
- name: add Kubernetes' APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: 'kubernetes'

# Installing 'docker', 'kubeadm' and 'iproute-tc' on master node 
- name: Installing Docker & kubeadm on Master Node
  package:
    name:
      - kubeadm
      - iproute2
    state: present

# Starting and enabling the docker on master node.
- name: enabling Docker on Master Node
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: ensure docker registry is available
  apt_repository: repo='deb https://download.docker.com/linux/ubuntu bionic stable' state=present

- name: ensure docker and dependencies are installed
  apt: name=docker-ce update_cache=yes

# Starting kubelet on master node. we maybe have a question on why kubelet is run on master node?
# The reason for running kubelet on master node is that, kubeadm uses containers (pods) to deploy etcd and the api server components. 
# For this, static manifests are created as yaml-files which are picked up by the kubelet on the master node 
# to provide the infrastructure pods. An added benefit is that you have the master node metrics available from the kubernetes api.
- name: Staring kubelet on Master Node
  service:
    name: kubelet
    state: started
    enabled: yes

- name: Workaround for running kubeadm
  shell:
    cmd: |
      rm /etc/containerd/config.toml
      systemctl restart containerd

# Pulling all the images required for k8s master on master node.
- name: Pulling the images of k8s master
  shell: kubeadm config images pull

# Updating Docker cgroup on Master Node. Reason for using cgroupdriver as 'systemd' instead of default ones, 
# https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/
- name: Updating Docker cgroup on Master Node
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

# Restart the docker on Master node to get all things activated
- name: Restart docker on Master Node
  service:
    name: docker
    state: restarted

# Install ovpn
- name: "Installing OpenVPN"
  apt: name={{item}} state=present
  with_items:
    - openvpn

# Configure client ovpn
- name: "Configure client ovpn"
  template:
    src: client.ovpn
    dest: "/root/"

- name: Get node name
  shell: curl http://169.254.169.254/latest/meta-data/local-hostname
  register: hostname

- name: Get the vps gateway ip 
  shell: "route -n | grep 'UG[ \t]' | awk '{print $2}'"
  register: private_ip

- name: Arrange route for ssh to access via primary interface
  shell: "route add -host 213.112.64.208 gw {{ private_ip.stdout }}"

# connect slaves to open vpn network
- name: connect slaves to open vpn network
  shell: "openvpn --config client.ovpn &"
  args:
    chdir: $HOME

- name: Get the tunnel iface ip
  shell: ip -f inet addr show tun0 | awk '/inet / {print $2}'
  register: vpn_iface_ip

# Initialize kubernetes cluster with a pod network so that the Pods can talk to each other, also ignoring errors like 'NumCPU', 'Mem'
# and 'FileContent--proc-sys-net-bridge-bridge-nf-call-iptables' as they are limited to system resources.
- name: initialize the cluster
  shell: "kubeadm init --apiserver-advertise-address={{ vpn_iface_ip.stdout }} --pod-network-cidr=10.244.0.0/16"
  args:
    chdir: $HOME
  register: token_log
- debug:
      msg: "{{ token_log.stdout }}"

# Setting kubectl on master node with updating kubernetes configuration from default path to '$HOME/.kube/config' path and updating
# ownership permissions to user and group.
- name: create .kube directory
  become: yes
  file:
    path: $HOME/.kube
    state: directory
    mode: 0755

- name: copies admin.conf to user's kube config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: $HOME/.kube/config
    remote_src: yes

- name: Pause for 1 minute to run calico
  ansible.builtin.pause:
    minutes: 1

# Deploying a CNI plugin on master node, we use 'calico' for it, https://projectcalico.docs.tigera.io/about/about-calico
- name: install Pod network
  become: yes
  shell: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.0/manifests/calico.yaml 
  args:
    chdir: $HOME
  register: calico_debug
- debug:
      msg: "{{ calico_debug.stdout }}"

# Cleaning caches on nodes RAM's. The “shell” module used here to clean the buffer cache on the master node,
# because while doing the setup it will create lots of temporary data on RAM
- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches