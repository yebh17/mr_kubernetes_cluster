---
# tasks file for k8s_worker

- name: Install net-tools for network management
  apt:
    name: net-tools
    state: present

# - name: Get node name
#   shell: curl http://169.254.169.254/latest/meta-data/local-hostname
#   register: hostname

# - name: Set hostname as FQDN
#   shell: hostnamectl set-hostname {{ hostname.stdout }}

- name: Get the vps gateway ip 
  shell: "route -n | grep 'UG[ \t]' | awk '{print $2}'"
  register: private_ip

- name: Arrange route for ssh to access via primary interface
  shell: "route add -host 213.112.64.208 gw {{ private_ip.stdout }}"

# Install ovpn
- name: "Installing OpenVPN"
  apt: name={{item}} state=present
  with_items:
    - openvpn

# Configure client ovpn
- name: "Configure client ovpn"
  template:
    src: client.ovpn
    dest: "/root/"

# Adding kubernetes repo from base url using gpg keys
- name: install APT Transport HTTPS
  apt:
    name: apt-transport-https
    state: present
 
- name: add Kubernetes apt-key
  apt_key:
    url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
    state: present
 
- name: add Kubernetes' APT repository
  apt_repository:
    repo: deb http://apt.kubernetes.io/ kubernetes-xenial main
    state: present
    filename: 'kubernetes'

# Installing 'docker', 'kubeadm' and 'iproute-tc' on worker node
- name: Installing iproute2 & kubeadm on worker Node
  package:
    name:
      - kubeadm
      - iproute2
    state: present

# Starting and enabling the docker on master node.
- name: enabling Docker on Master Node
  apt_key:
    url: https://download.docker.com/linux/ubuntu/gpg
    state: present

- name: ensure docker registry is available
  apt_repository: repo='deb https://download.docker.com/linux/ubuntu bionic stable' state=present

- name: ensure docker and dependencies are installed
  apt: name=docker-ce update_cache=yes
  
# Starting kubelet services on worker node.
- name: Staring & enabling Docker & kubelet on worker Node
  service:
    name: kubelet
    state: started
    enabled: yes

# Updating Docker cgroup on worker Node. Reason for using cgroupdriver as 'systemd' instead of default ones, 
# https://kubernetes.io/docs/tasks/administer-cluster/kubeadm/configure-cgroup-driver/
- name: Updating Docker cgroup on worker Node
  copy:
    dest: /etc/docker/daemon.json
    content: |
      {
      "exec-opts": ["native.cgroupdriver=systemd"]
      }

# Restart the docker on worker node to get all things activated
- name: Restart Docker on worker Node
  service:
    name: docker
    state: restarted

# Updating IP tables on worker Node. Usually in the linux distros like ubuntu,
# (https://www.kevinhooke.com/2018/11/23/checking-iptables-filtering-for-bridge-networking-on-ubuntu-for-kubernetes-setup/)
# the bridge module in the kernel for "ip6tables, iptables and arptables" has the default set to "1"
# ("on", i.e. "*do* send the packets to iptables"), but for the distros like Fedora, RHEL, and CentOS they are set to '0' so we need to
# update the '/etc/sysctl.d/k8s.conf' to set it to '1'
- name: Updating IP tables on worker Node
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1

# Reloading sysctl on worker Node to activate the bridge changes
- name: Reloading sysctl on worker Node
  command: sysctl --system

- name: Workaround for running kube-api server on ubuntu_21.x and later versions
  shell:
    cmd: |
      containerd config default | tee /etc/containerd/config.toml
      sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
      service containerd restart
      service kubelet restart

# connect workers to open vpn network
- name: connect workers to open vpn network
  shell: "openvpn --config client.ovpn &"
  args:
    chdir: /root/

# Cleaning caches on nodes RAM's. The “shell” module used here to clean the buffer cache on the worker nodes,
# because while doing the setup it will create lots of temporary data on RAM
- name: Cleaning Caches on RAM
  shell: echo 3 > /proc/sys/vm/drop_caches